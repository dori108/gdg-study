{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP9LEZhZo6U1So6FZ1i3EYD",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dori108/gdg-study/blob/main/4-3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. ✅ 라이브러리 및 유틸리티 정의 (utils.py)\n",
        "필요 라이브러리 import\n",
        "\n",
        "torch, torchvision, timm (EfficientNet 포함), pandas, numpy, matplotlib\n",
        "\n",
        "이미지 경로 처리 및 로깅용 os, random, logging 등\n",
        "\n",
        "set_seed(seed)\n",
        "→ 랜덤 시드를 고정해서 실험 결과가 재현 가능하도록 함.\n",
        "→ torch, numpy, random 모두에 시드를 설정하고 CUDA 환경도 고정.\n",
        "\n",
        "train(model, dataloader, optimizer, criterion, device)\n",
        "→ 주어진 DataLoader를 사용해 학습을 수행하는 함수.\n",
        "→ epoch 동안 loss를 계산하고 모델을 업데이트함.\n",
        "\n",
        "evaluate(model, dataloader, device)\n",
        "→ 학습이 끝난 모델로 검증 또는 테스트 데이터셋에서의 예측을 수행.\n",
        "→ 예측된 클래스 라벨을 반환함.\n",
        "\n",
        "2. 🧼 데이터 구성 및 전처리 (dataset.py)\n",
        "이미지 변환 정의 (transform)\n",
        "\n",
        "학습용: RandomResizedCrop, RandomHorizontalFlip, ToTensor, Normalize\n",
        "\n",
        "검증/테스트용: Resize, CenterCrop, ToTensor, Normalize\n",
        "\n",
        "CustomDataset 클래스 정의\n",
        "\n",
        ".csv 파일에서 이미지 경로와 라벨을 읽어옴\n",
        "\n",
        "__getitem__()에서 이미지 열고 transform 적용 후 리턴\n",
        "\n",
        "DataLoader 생성\n",
        "\n",
        "train.csv, val.csv, test.csv를 읽어 각각의 Dataset 생성 후 DataLoader로 감쌈\n",
        "\n",
        "배치 사이즈, 셔플 여부, 워커 수 등을 설정\n",
        "\n",
        "3. 🧠 모델 정의 (model.py)\n",
        "EfficientNet-b0 불러오기\n",
        "\n",
        "timm.create_model()로 사전학습된 EfficientNet-b0을 로딩\n",
        "\n",
        "classifier head를 nn.Linear(..., 88)로 수정하여 88개 클래스에 맞춤\n",
        "\n",
        "4. 🚀 학습 및 평가 실행 (main.py)\n",
        "시드 설정 및 디바이스 지정\n",
        "→ set_seed(42), device = cuda if available else cpu\n",
        "\n",
        "하이퍼파라미터 설정\n",
        "\n",
        "batch_size, num_epochs, learning_rate, weight_decay, lr_scheduler\n",
        "\n",
        "필요 시 여러 실험 조합을 편하게 바꾸도록 설정 가능\n",
        "\n",
        "데이터 로더 생성\n",
        "\n",
        "train, val, test용 DataLoader 정의\n",
        "\n",
        "모델, 옵티마이저, 손실함수 구성\n",
        "\n",
        "모델: EfficientNet-b0\n",
        "\n",
        "옵티마이저: AdamW\n",
        "\n",
        "손실함수: CrossEntropyLoss\n",
        "\n",
        "스케줄러: CosineAnnealingLR\n",
        "\n",
        "학습 루프\n",
        "\n",
        "epoch마다 train()을 통해 학습 진행\n",
        "\n",
        "각 epoch 후 evaluate()를 통해 validation set 정확도 확인\n",
        "\n",
        "validation 성능이 향상되면 모델 저장 (best.pt 등)\n",
        "\n",
        "테스트 평가 및 결과 저장\n",
        "\n",
        "테스트셋에 대해 evaluate() 실행하여 예측값 생성\n",
        "\n",
        "submission.csv로 예측 결과 저장 (image_id, label 형식)"
      ],
      "metadata": {
        "id": "eMce_7BvqLAl"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_c0HecTGoKg7"
      },
      "outputs": [],
      "source": [
        "config.py\n",
        "\n",
        "SEED = 42\n",
        "BATCH_SIZE = 32\n",
        "NUM_EPOCHS = 10\n",
        "NUM_CLASSES = 88\n",
        "MODEL_NAME = \"efficientnet_b0\"\n",
        "LEARNING_RATE = 1e-4\n",
        "DEVICE = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.py\n",
        "\n",
        "class CustomDataset(Dataset):\n",
        "    def __init__(self, dataframe, transform=None):\n",
        "        ...\n",
        "\n",
        "def get_transforms(phase=\"train\"):\n",
        "    ...\n"
      ],
      "metadata": {
        "id": "VKB2rbjTpZau"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.py\n",
        "\n",
        "def build_model(model_name=\"efficientnet_b0\", num_classes=88):\n",
        "    model = timm.create_model(model_name, pretrained=True)\n",
        "    model.classifier = nn.Linear(model.classifier.in_features, num_classes)\n",
        "    return model\n"
      ],
      "metadata": {
        "id": "cc_no5LbpbcV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.py\n",
        "\n",
        "def train(model, dataloader, ...):\n",
        "    ...\n",
        "\n",
        "def evaluate(model, dataloader, ...):\n",
        "    ...\n"
      ],
      "metadata": {
        "id": "-_I239KopatB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "main.py\n",
        "\n",
        "from src.model import build_model\n",
        "from src.train import train, evaluate\n",
        "from src.dataset import CustomDataset, get_transforms\n",
        "from config import *\n",
        "\n",
        "# 이후 데이터셋 로딩, 모델 생성, 학습, 평가 등 순차적 실행\n"
      ],
      "metadata": {
        "id": "GUVDHmKlpjQs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# EfficientNet-b0 모델을 활용하여 88개의 클래스를 분류하는 이미지 분류 실험\n",
        "\n",
        "\n",
        "# === utils.py ===\n",
        "import torch\n",
        "import random\n",
        "import numpy as np\n",
        "\n",
        "def set_seed(seed):\n",
        "    random.seed(seed)\n",
        "    np.random.seed(seed)\n",
        "    torch.manual_seed(seed)\n",
        "    torch.cuda.manual_seed(seed)\n",
        "    torch.backends.cudnn.deterministic = True\n",
        "    torch.backends.cudnn.benchmark = False\n",
        "\n",
        "\n",
        "def train(model, optimizer, criterion, train_loader, val_loader, device, num_epochs):\n",
        "    model.to(device)\n",
        "    for epoch in range(num_epochs):\n",
        "        model.train()\n",
        "        train_loss = 0.0\n",
        "        for inputs, labels in train_loader:\n",
        "            inputs, labels = inputs.to(device), labels.to(device)\n",
        "            optimizer.zero_grad()\n",
        "            outputs = model(inputs)\n",
        "            loss = criterion(outputs, labels)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "            train_loss += loss.item() * inputs.size(0)\n",
        "        train_loss /= len(train_loader.dataset)\n",
        "\n",
        "        model.eval()\n",
        "        val_loss = 0.0\n",
        "        correct = 0\n",
        "        with torch.no_grad():\n",
        "            for inputs, labels in val_loader:\n",
        "                inputs, labels = inputs.to(device), labels.to(device)\n",
        "                outputs = model(inputs)\n",
        "                loss = criterion(outputs, labels)\n",
        "                val_loss += loss.item() * inputs.size(0)\n",
        "                _, preds = torch.max(outputs, 1)\n",
        "                correct += (preds == labels).sum().item()\n",
        "        val_loss /= len(val_loader.dataset)\n",
        "        accuracy = correct / len(val_loader.dataset)\n",
        "\n",
        "        print(f\"Epoch [{epoch+1}/{num_epochs}], Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}, Val Acc: {accuracy:.4f}\")\n",
        "\n",
        "\n",
        "def evaluate(model, test_loader, device):\n",
        "    model.to(device)\n",
        "    model.eval()\n",
        "    correct = 0\n",
        "    total = 0\n",
        "    predictions = []\n",
        "    with torch.no_grad():\n",
        "        for inputs, labels in test_loader:\n",
        "            inputs, labels = inputs.to(device), labels.to(device)\n",
        "            outputs = model(inputs)\n",
        "            _, preds = torch.max(outputs, 1)\n",
        "            predictions.extend(preds.cpu().numpy())\n",
        "            correct += (preds == labels).sum().item()\n",
        "            total += labels.size(0)\n",
        "    accuracy = correct / total\n",
        "    print(f\"Test Accuracy: {accuracy:.4f}\")\n",
        "    return predictions\n",
        "\n",
        "\n",
        "# === dataset.py ===\n",
        "import pandas as pd\n",
        "from PIL import Image\n",
        "from torch.utils.data import Dataset\n",
        "from torchvision import transforms\n",
        "\n",
        "class CustomDataset(Dataset):\n",
        "    def __init__(self, dataframe, transform=None):\n",
        "        self.dataframe = dataframe\n",
        "        self.transform = transform\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.dataframe)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        img_path = self.dataframe.iloc[idx]['img_path']\n",
        "        label = self.dataframe.iloc[idx]['label']\n",
        "        image = Image.open(img_path).convert('RGB')\n",
        "        if self.transform:\n",
        "            image = self.transform(image)\n",
        "        return image, label\n",
        "\n",
        "\n",
        "def get_transforms(phase=\"train\"):\n",
        "    if phase == \"train\":\n",
        "        return transforms.Compose([\n",
        "            transforms.Resize((224, 224)),\n",
        "            transforms.RandomHorizontalFlip(),\n",
        "            transforms.ToTensor(),\n",
        "            transforms.Normalize(mean=[0.485, 0.456, 0.406],\n",
        "                                 std=[0.229, 0.224, 0.225])\n",
        "        ])\n",
        "    else:\n",
        "        return transforms.Compose([\n",
        "            transforms.Resize((224, 224)),\n",
        "            transforms.ToTensor(),\n",
        "            transforms.Normalize(mean=[0.485, 0.456, 0.406],\n",
        "                                 std=[0.229, 0.224, 0.225])\n",
        "        ])\n",
        "\n",
        "\n",
        "# === model.py ===\n",
        "import timm\n",
        "import torch.nn as nn\n",
        "\n",
        "def build_model(model_name=\"efficientnet_b0\", num_classes=88):\n",
        "    model = timm.create_model(model_name, pretrained=True)\n",
        "    model.classifier = nn.Linear(model.classifier.in_features, num_classes)\n",
        "    return model\n",
        "\n",
        "\n",
        "# === main.py ===\n",
        "import torch\n",
        "import pandas as pd\n",
        "from torch.utils.data import DataLoader\n",
        "from torch import optim, nn\n",
        "\n",
        "from dataset import CustomDataset, get_transforms\n",
        "from model import build_model\n",
        "from utils import set_seed, train, evaluate\n",
        "\n",
        "set_seed(42)\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "# Load data\n",
        "train_df = pd.read_csv(\"train.csv\")\n",
        "val_df = pd.read_csv(\"val.csv\")\n",
        "test_df = pd.read_csv(\"test.csv\")\n",
        "\n",
        "train_dataset = CustomDataset(train_df, transform=get_transforms(\"train\"))\n",
        "val_dataset = CustomDataset(val_df, transform=get_transforms(\"val\"))\n",
        "test_dataset = CustomDataset(test_df, transform=get_transforms(\"val\"))\n",
        "\n",
        "train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n",
        "val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)\n",
        "test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)\n",
        "\n",
        "# Build model\n",
        "model = build_model(\"efficientnet_b0\", num_classes=88)\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = optim.AdamW(model.parameters(), lr=1e-4)\n",
        "\n",
        "# Train and evaluate\n",
        "train(model, optimizer, criterion, train_loader, val_loader, device, num_epochs=10)\n",
        "preds = evaluate(model, test_loader, device)\n",
        "\n",
        "# Save submission\n",
        "submission = pd.DataFrame({\"id\": test_df['id'], \"label\": preds})\n",
        "submission.to_csv(\"submission.csv\", index=False)"
      ],
      "metadata": {
        "id": "1QqibJfapv4Y"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
